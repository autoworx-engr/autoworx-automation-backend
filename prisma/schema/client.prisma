// Client of a company.
// Client is just data, they can't login.
model Client {
  id                     Int                      @id @default(autoincrement())
  firstName              String                   @map("first_name")
  lastName               String?                  @map("last_name")
  mobile                 String?
  email                  String?
  address                String?
  city                   String?
  state                  String?
  zip                    String?
  isFleet                Boolean?                 @default(false) @map("is_fleet")
  photo                  String                   @default("/images/default.png")
  fromRequest            Boolean?                 @default(false) @map("from_request")
  fromRequestedCompanyId Int?                     @map("from_requested_company_id")
  sourceId               Int?                     @map("source_id")
  converted              Boolean?                 @default(false) @map("converted")
  companyId              Int                      @map("company_id")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @updatedAt @map("updated_at")
  company                Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerCompany        String?                  @map("customer_company")
  tagId                  Int?                     @map("tag_id")
  notes                  String?
  conversationsTrack     ClientConversationTrack?
  appointments           Appointment[]
  source                 Source?                  @relation(fields: [sourceId], references: [id])
  tag                    Tag?                     @relation(fields: [tagId], references: [id])
  Vehicle                Vehicle[]
  Invoice                Invoice[]
  ClientCoupon           ClientCoupon[]
  Task                   Task[]
  ClientSMS              ClientSMS[]
  ClientCall             ClientCall[]
  leadId                 Int?
  Lead                   Lead?                    @relation(fields: [leadId], references: [id])
  MailgunEmail           MailgunEmail[]
  firstContactTime       DateTime?
  lastMailgunEmailReadId Int?
  isStarred              Boolean?                 @default(false)
  fleet                  Fleet?

  @@index([companyId], name: "fk_customers_company")
  @@map("Client")
}

model Fleet {
  id                   Int              @id @default(autoincrement())
  clientId             Int              @unique @map("client_id")
  fleetName            String
  contactName          String
  preferredPaymentTerm String?          @map("preferred_payment_term")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @default(now()) @updatedAt @map("updated_at")
  client               Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  statement            FleetStatement[]
}

model FleetStatement {
  id        String    @id @default(cuid())
  fleetId   Int       @map("fleet_id")
  Fleet     Fleet     @relation(fields: [fleetId], references: [id])
  invoice   Invoice[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

model Source {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int      @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Client    Client[]
}

model ClientCoupon {
  id        Int      @id @default(autoincrement())
  couponId  Int      @map("coupon_id")
  clientId  Int      @map("client_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model ClientConversationTrack {
  id                 Int       @id @default(autoincrement())
  clientId           Int       @unique @map("client_id") // Add unique constraint to establish the one-to-one relation
  emailIsRead        Boolean   @default(true) @map("email_is_read")
  smsIsRead          Boolean   @default(true) @map("sms_is_read")
  emailIsUnReadCount Int       @default(0) @map("email_is_unread_count")
  smsUnReadCount     Int       @default(0) @map("sms_unread_count")
  emailLastMessage   String    @default("no message") @map("email_last_message")
  smsLastMessage     String    @default("no message") @map("sms_last_message")
  lastMessageBy      String?   @map("last_message_by")
  lastEmailBy        String?   @map("last_email_by") // Track who sent the last email: "Company" or "Client"
  sendAt             DateTime? @map("send_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade) // Update this line to establish the one-to-one relation
}
