// Invoice of a company.
// Note that `Invoice` is same as `Estimate`. So don't get confused.
// We can differentiate them by `type` field.
model Invoice {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  convertedAt             DateTime?                 @map("converted_at")
  deliveredAt             DateTime?                 @map("delivered_at")
  completedAt             DateTime?                 @map("completed_at")
  type                    InvoiceType               @default(Invoice)
  clientId                Int?                      @map("customer_id")
  vehicleId               Int?                      @map("vehicle_id")
  subtotal                Decimal?                  @default(0) @db.Decimal(8, 2)
  discount                Decimal?                  @default(0) @db.Decimal(8, 2)
  tax                     Decimal?                  @default(0) @db.Decimal(8, 2)
  serviceFee              Decimal?                  @default(0) @db.Decimal(8, 2)
  grandTotal              Decimal?                  @default(0) @map("grand_total") @db.Decimal(8, 2)
  deposit                 Decimal?                  @default(0) @db.Decimal(8, 2)
  due                     Decimal?                  @default(0) @db.Decimal(8, 2)
  statusId                Int?                      @map("status_id")
  fleetStatementId        String?
  internalNotes           String?
  dueDate                 String?
  terms                   String?
  policy                  String?
  customerNotes           String?
  customerComments        String?
  companyId               Int                       @map("company_id")
  userId                  Int?                      @map("user_id")
  assignedToId            Int?                      @map("assigned_to")
  fromRequest             Boolean?                  @default(false) @map("from_request")
  fromRequestedCompanyId  Int?                      @map("from_requested_company_id")
  requestEstimateId       Int?                      @unique @map("request_estimate_id")
  columnId                Int?                      @map("column_id")
  profit                  Int?                      @default(0)
  authorizedName          String?
  stripePaymentLink       String?                   @db.Text
  isWorkOrder             Boolean?                  @default(false) @map("is_work_order")
  workOrderCreatedAt      DateTime?                 @map("work_order_created_at")
  company                 Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoiceItems            InvoiceItem[]
  vehicleParts            VehicleParts[]
  photos                  InvoicePhoto[]
  tasks                   Task[]
  status                  Status?                   @relation(fields: [statusId], references: [id])
  payments                Payment[]
  user                    User?                     @relation(name: "user", fields: [userId], references: [id], onDelete: SetNull)
  Material                Material[]
  InventoryProductHistory InventoryProductHistory[]
  vehicle                 Vehicle?                  @relation(fields: [vehicleId], references: [id])
  client                  Client?                   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  technician              Technician[]
  tags                    InvoiceTags[]
  requestEstimate         RequestEstimate?          @relation(fields: [requestEstimateId], onDelete: SetNull, references: [id])
  assignedTo              User?                     @relation(name: "assignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  column                  Column?                   @relation(fields: [columnId], references: [id], onDelete: SetNull)
  InvoiceRedo             InvoiceRedo[]
  serviceIndex            Json?
  Inspections             InvoiceInspection[]
  totalPayment            Decimal?                  @default(0) @map("total_payment") @db.Decimal(8, 2)
  damageNotes             String?                   @map("damage_notes")
  columnChangedAt         DateTime?                 @map("column_changed_at")
  stripePayments          StripePayment[]
  TimeDelayExecution      TimeDelayExecution[]
  Refund                  Refund[]
  FleetStatement          FleetStatement?           @relation(fields: [fleetStatementId], references: [id])

  @@index([companyId], name: "fk_invoices_company")
  @@index([companyId, type])
}

model InvoiceTags {
  id        Int      @id @default(autoincrement())
  invoiceId String   @map("invoice_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([invoiceId], name: "fk_invoice_tags_invoice")
  @@index([tagId], name: "fk_invoice_tags_tag")
}

enum InvoiceType {
  Invoice
  Estimate
}

// Photo of a invoice.
// One invoice can have multiple photos.
model InvoicePhoto {
  id        Int      @id @default(autoincrement())
  invoiceId String   @map("invoice_id")
  photo     String   @db.VarChar(1024)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], name: "fk_invoice_photos_invoice")
}

model RequestEstimate {
  id                Int      @id @default(autoincrement())
  senderId          Int      @map("sender_id")
  senderCompanyId   Int      @map("sender_company_id")
  receiverId        Int      @map("receiver_id")
  receiverCompanyId Int      @map("receiver_company_id")
  vehicleId         Int      @unique @map("vehicle_id")
  serviceId         Int      @unique @map("service_id")
  invoiceId         String   @map("invoice_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  sender            User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver          User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderCompany     Company  @relation("SenderCompany", fields: [senderCompanyId], references: [id], onDelete: Cascade)
  receiverCompany   Company  @relation("ReceiverCompany", fields: [receiverCompanyId], references: [id], onDelete: Cascade)
  invoice           Invoice?
  vehicle           Vehicle? @relation("Vehicle", fields: [vehicleId], references: [id], onDelete: Cascade)
  service           Service? @relation("Service", fields: [serviceId], references: [id], onDelete: Cascade)
  message           Message? @relation("Message")
}

// Technician of a InvoiceItem.
// One InvoiceItem can have multiple technicians.
model Technician {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  date          DateTime? @map("assigned_date")
  dateClosed    DateTime? @map("date_closed")
  due           DateTime? @default(now())
  amount        Decimal?  @default(0)
  priority      Priority? @default(Low)
  status        String?
  note          String?   @map("new_note")
  serviceId     Int       @map("service_id")
  invoiceId     String    @map("invoice_id")
  companyId     Int       @map("company_id")
  invoiceItemId Int       @map("invoice_item_id")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  vehicleParts VehicleParts[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  service      Service?       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  invoice      Invoice?       @relation(fields: [invoiceId], references: [id])
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  InvoiceRedo  InvoiceRedo[]
  invoiceItem  InvoiceItem    @relation(fields: [invoiceItemId], references: [id], onDelete: Cascade)
}

model InvoiceRedo {
  id           Int      @id @default(autoincrement())
  invoiceId    String   @map("invoice_id")
  serviceId    Int      @map("service_id")
  technicianId Int      @map("technician_id")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  invoice    Invoice    @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service    Service    @relation(fields: [serviceId], references: [id])
  technician Technician @relation(fields: [technicianId], references: [id])
}

//model for inspection of a invoice.
model InvoiceInspection {
  id        Int      @id @default(autoincrement())
  invoiceId String   @map("invoice_id")
  title     String
  driver    Boolean  @default(false)
  passenger Boolean  @default(false)
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], name: "fk_invoice_inspections_invoice")
}
