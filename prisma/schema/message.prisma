// Message for chat.
model Message {
  id                Int              @id @default(autoincrement())
  to                Int?
  message           String
  from              Int
  groupId           Int?             @map("group_id")
  section           MessageSection?
  requestEstimateId Int?             @unique @map("request_estimate_id")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at")
  group             Group?           @relation(fields: [groupId], references: [id])
  attachment        Attachment[]
  requestEstimate   RequestEstimate? @relation("Message", fields: [requestEstimateId], references: [id])
  chatTrack         ChatTrack?

  @@index([to], name: "fk_messages_to")
  @@index([from], name: "fk_messages_from")
  @@index([groupId], name: "fk_messages_group")
}

enum MessageSection {
  internal
  collaboration
}

model ChatTrack {
  id          Int             @id @default(autoincrement())
  lastMessage String
  isRead      Boolean         @default(false)
  section     MessageSection?
  senderId    Int?            @map("sender_id")
  receiverId  Int?            @map("receiver_id")
  messageId   Int?            @unique @map("message_id")
  message     Message?        @relation(fields: [messageId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
}

model Attachment {
  id                 Int               @id @default(autoincrement())
  fileName           String // File name (e.g., 'image.png')
  fileType           String // File type (e.g., 'image/png', 'application/pdf')
  fileUrl            String // File storage path or URL
  fileSize           String
  messageId          Int? // Foreign key to Message model, enforces one-to-one relationship
  bugReportMessageId Int?
  message            Message?          @relation(fields: [messageId], references: [id])
  bugReportMessage   BugReportMessage? @relation(fields: [bugReportMessageId], references: [id])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt @map("updated_at")
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  type      String    @default("Group")
  users     User[]    @relation("UserGroups")
  messages  Message[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
}

model BugReport {
  id               Int                @id @default(autoincrement())
  companyId        Int
  isResolved       Boolean?           @default(false)
  company          Company            @relation(fields: [companyId], references: [id])
  BugReportMessage BugReportMessage[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt @map("updatedAt")
}

model BugReportMessage {
  id          Int          @id @default(autoincrement())
  bugReportId Int
  subject     String?
  content     String       @db.Text
  senderType  UserType
  userId      Int
  isRead      Boolean      @default(false)
  attachment  Attachment[] // Relation to Attachment
  bugReport   BugReport    @relation(fields: [bugReportId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt @map("updatedAt")
}

enum UserType {
  super_admin
  company
}
