// Company model.
// Every user belongs to a company.
// For now, every user has to create their own company when registering.
// In the future, we can add a feature to join a company.
model Company {
  id                               Int                                @id @default(autoincrement())
  name                             String
  businessId                       String?                            @map("business_id")
  businessType                     String?                            @map("business_type")
  phone                            String?
  email                            String?
  industry                         String?
  website                          String?
  address                          String?
  city                             String?
  state                            String?
  zip                              String?
  image                            String?
  businessVisibility               Boolean?                           @default(true) @map("business_visibility")
  phoneVisibility                  Boolean?                           @default(true) @map("phone_visibility")
  addressVisibility                Boolean?                           @default(true) @map("address_visibility")
  tax                              Decimal?                           @default(0)
  serviceFee                       Decimal?                           @default(0)
  currency                         String?                            @default("USD")
  terms                            String?                            @db.VarChar(800)
  policy                           String?                            @db.VarChar(800)
  leadTerms                        String?                            @db.Text @map("lead_terms")
  leadPolicy                       String?                            @db.Text @map("lead_policy")
  googleEmail                      String?                            @map("google_email")
  googleRefreshToken               String?                            @map("google_refresh_token")
  googleCalendarToken              String?                            @map("google_calendar_token")
  createdAt                        DateTime                           @default(now()) @map("created_at")
  updatedAt                        DateTime                           @default(now()) @updatedAt @map("updated_at")
  companyLatitude                  Float?
  companyLongitude                 Float?
  zapierToken                      String?                            @unique @db.VarChar(240)
  users                            User[]
  tasks                            Task[]
  clients                          Client[]
  services                         Service[]
  vehicles                         Vehicle[]
  invoices                         Invoice[]
  calendarSettings                 CalendarSettings[]
  appointments                     Appointment[]
  emailTemplates                   EmailTemplate[]
  materials                        Material[]
  vendors                          Vendor[]
  labors                           Labor[]
  tags                             Tag[]
  categories                       Category[]
  statuses                         Status[]
  paymentMethods                   PaymentMethod[]
  inventoryProducts                InventoryProduct[]
  VehicleColor                     VehicleColor[]
  Source                           Source[]
  Payment                          Payment[]
  Coupon                           Coupon[]
  Technician                       Technician[]
  companyJoinsAsOne                CompanyJoin[]                      @relation("CompanyOne")
  companyJoinsAsTwo                CompanyJoin[]                      @relation("CompanyTwo")
  companyEmailTemplate             CompanyEmailTemplate[]
  permissionForManager             PermissionForManager[]
  permissionForSales               PermissionForSales[]
  permissionForTechnician          PermissionForTechnician[]
  permissionForOther               PermissionForOther[]
  permissions                      Permission[]
  Lead                             Lead[]
  isCRMEnabled                     Boolean?                           @default(false) @map("is_crm_enabled")
  LeaveRequest                     LeaveRequest[]
  RequestEstimateSent              RequestEstimate[]                  @relation("SenderCompany")
  RequestEstimateReceived          RequestEstimate[]                  @relation("ReceiverCompany")
  Column                           Column[]
  ClockInOut                       ClockInOut[]
  Holiday                          Holiday[]
  InventoryProductHistory          InventoryProductHistory[]
  UserFeedback                     UserFeedback[]
  ClientSMS                        ClientSMS[]
  ClientCall                       ClientCall[]
  TwilioCredentials                TwilioCredentials?                 @relation(fields: [twilioCredentialsId], references: [id])
  twilioCredentialsId              Int?
  MailgunCredential                MailgunCredential?                 @relation(fields: [mailgunCredentialId], references: [id])
  mailgunCredentialId              Int?
  MailgunEmail                     MailgunEmail[]
  NotificationSettings             NotificationSettingsV2[]
  Notification                     Notification[]
  stripeAccountId                  String?
  timezone                         String?
  stripePayment                    StripePayment[]
  leadLink                         LeadLink[]
  PipelineAutomationRule           PipelineAutomationRule[]
  ServiceMaintenanceAutomationRule ServiceMaintenanceAutomationRule[]
  Refund                           Refund[]
  InvoiceAutomationRule            InvoiceAutomationRule[]
  inventoryAutomationRule          InventoryAutomationRule[]
  companyPermissionModules         CompanyPermissionModule[]
  BugReport                        BugReport[]
  salaryHistory                    SalaryHistory[]
}

// create model that will handle multiple companies join and collaboration
model CompanyJoin {
  id           Int      @id @default(autoincrement())
  companyOneId Int
  companyTwoId Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  companyOne   Company  @relation(fields: [companyOneId], references: [id], onDelete: Cascade, name: "CompanyOne")
  companyTwo   Company  @relation(fields: [companyTwoId], references: [id], onDelete: Cascade, name: "CompanyTwo")
}

// Calendar settings for a company.
model CalendarSettings {
  id        Int      @id @default(autoincrement())
  companyId Int      @unique @map("company_id")
  weekStart String
  dayStart  String
  dayEnd    String
  weekend1  String   @default("Saturday")
  weekend2  String   @default("Sunday")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Holiday {
  id        Int      @id @default(autoincrement())
  companyId Int      @map("company_id")
  date      DateTime
  month     String
  year      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([month])
  @@index([year])
}

// Email template for a company.
model EmailTemplate {
  id        Int               @id @default(autoincrement())
  subject   String
  message   String?           @db.Text
  type      EmailTemplateType
  companyId Int               @map("company_id")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")
  company   Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

enum EmailTemplateType {
  Confirmation
  Reminder
}

model Lead {
  id                  Int        @id @default(autoincrement())
  clientName          String     @map("client_name")
  clientEmail         String?    @map("client_email")
  clientPhone         String?    @map("client_phone")
  vehicleInfo         String     @map("vehicle_info")
  vehicleId           Int?
  services            String
  source              String
  comments            String?
  companyId           Int        @map("company_id")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @default(now()) @updatedAt @map("updated_at")
  columnChangedAt     DateTime?  @map("column_changed_at")
  company             Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  columnId            Int?       @map("column_id")
  column              Column?    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignedSalesUserId Int?       @map("assigned_sales_id")
  assignedDate        DateTime?  @map("assigned_date")
  salesUser           User?      @relation(fields: [assignedSalesUserId], references: [id], onDelete: Cascade)
  isLead              Boolean    @default(true)
  isQualified         Boolean    @default(true)
  isEstimateCreated   Boolean?   @default(false)
  tasks               Task[]
  leadTags            LeadTags[]
  serviceId           Int?
  Service             Service?   @relation(fields: [serviceId], references: [id])
  clientId            Int?

  Client              Client[]
  TimeDelayExecutions TimeDelayExecution[]

  @@index([serviceId])
  @@index([vehicleId])
  @@index([columnId])
  @@index([companyId])
  @@index([assignedSalesUserId])
  @@index([clientEmail])
  @@index([columnChangedAt])
  @@index([isEstimateCreated])
  @@index([createdAt])
  @@index([companyId, columnId])
}

model LeadTags {
  id        Int      @id @default(autoincrement())
  leadId    Int      @map("lead_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([leadId], name: "fk_lead_tags_lead")
  @@index([tagId], name: "fk_lead_tags_tag")
}

model LeadLink {
  id            Int      @id @default(autoincrement())
  source        String
  generatedLink String   @db.Text
  shortUrl      String?
  QRCode        String?  @db.Text
  isShow        Boolean  @default(true)
  companyId     Int?
  company       Company? @relation(fields: [companyId], references: [id])
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([source, companyId, shortUrl], name: "unique_lead_link_per_company")
  @@index([companyId])
}

model LeaveRequest {
  id          Int                @id @default(autoincrement())
  userId      Int                @map("user_id")
  startDate   DateTime           @map("start_date")
  endDate     DateTime           @map("end_date")
  status      LeaveRequestStatus
  title       String
  description String
  companyId   Int                @map("company_id")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @updatedAt @map("updated_at")
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum LeaveRequestStatus {
  Pending
  Approved
  Rejected
}

// TODO: this might need to be renamed
model CompanyEmailTemplate {
  id        Int      @id @default(autoincrement())
  subject   String
  message   String?  @db.Text
  companyId Int      @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("companyEmailTemplate")
}

model TwilioCredentials {
  id Int @id @default(autoincrement())

  accountSid     String  @map("account_sid")
  authToken      String? @map("auth_token")
  phoneNumber    String  @map("phone_number")
  apiKeySid      String  @map("api_key_sid")
  apiKeySecret   String  @map("api_key_secret")
  twimlAppSid    String? @map("twiml_app_sid")
  phoneNumberSid String  @map("phone_number_sid")
  companyId      Int     @unique @map("company_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Company Company[]
}

model MailgunCredential {
  id                 Int                       @id @default(autoincrement())
  companyId          Int
  mailAddress        String?
  domain             String
  apiKey             String?
  smtpPassword       String?
  dnsRecords         Json?
  isVerified         Boolean                   @default(false)
  verificationStatus MailgunVerificationStatus @default(pending) // Use an enum if possible
  company            Company[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, domain]) // Ensures a user cannot have duplicate domains
}

enum MailgunVerificationStatus {
  pending
  verified
  failed
}

model MailgunEmail {
  id Int @id @default(autoincrement())

  subject     String
  text        String                   @db.LongText
  attachments MailgunEmailAttachment[]
  emailBy     EMAIL_BY

  messageId String?

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  clientId Int
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

enum EMAIL_BY {
  Client
  Company
}

model MailgunEmailAttachment {
  id Int @id @default(autoincrement())

  name String
  url  String
  size Int

  mailgunEmailId Int
  mailgunEmail   MailgunEmail @relation(fields: [mailgunEmailId], references: [id], onDelete: Cascade)
}
