// Pipeline Automation Schema

model PipelineAutomationRule {
  id             Int             @id @default(autoincrement())
  title          String
  stages         PipelineStage[] // Stages where the rule applies (can select multiple)
  conditionType  ConditionType
  targetColumnId Int? // Target column/stage where lead will move to
  targetColumn   Column?         @relation(fields: [targetColumnId], references: [id], name: "targetColumn")
  isPaused       Boolean         @default(false)
  timeDelay      Int? // in seconds
  companyId      Int
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Related models
  timeDelayExecutions TimeDelayExecution[]

  @@index([companyId])
}

model PipelineStage {
  id             Int                    @id @default(autoincrement())
  pipelineRuleId Int
  columnId       Int
  pipelineRule   PipelineAutomationRule @relation(fields: [pipelineRuleId], references: [id], onDelete: Cascade)
  column         Column                 @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([pipelineRuleId, columnId])
  @@index([pipelineRuleId])
}

model TimeDelayExecution {
  id                        Int                               @id @default(autoincrement())
  pipelineRuleId            Int?
  communicationRuleId       Int?
  leadId                    Int?
  estimateId                String?
  serviceMaintenanceRuleId  Int?
  invoiceAutomationRuleId   Int?
  lead                      Lead?                             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  estimate                  Invoice?                          @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  executeAt                 DateTime
  status                    ExecutionStatus                   @default(PENDING)
  jobId                     String?
  createdAt                 DateTime                          @default(now())
  updatedAt                 DateTime                          @updatedAt
  columnId                  Int?
  column                    Column?                           @relation(fields: [columnId], references: [id])
  pipelineRule              PipelineAutomationRule?           @relation(fields: [pipelineRuleId], references: [id], onDelete: SetNull)
  communicationRule         CommunicationAutomationRule?      @relation(fields: [communicationRuleId], references: [id], onDelete: SetNull)
  serviceMaintenanceRule    ServiceMaintenanceAutomationRule? @relation(fields: [serviceMaintenanceRuleId], references: [id], onDelete: SetNull)
  InvoiceAutomationRule     InvoiceAutomationRule?            @relation(fields: [invoiceAutomationRuleId], references: [id], onDelete: SetNull)
  InventoryAutomationRule   InventoryAutomationRule?          @relation(fields: [inventoryAutomationRuleId], references: [id])
  inventoryAutomationRuleId Int?

  @@index([executeAt, status])
  @@index([pipelineRuleId])
  @@index([communicationRuleId])
  @@index([leadId])
}

model CommunicationAutomationRule {
  id                 Int                    @id @default(autoincrement())
  companyId          Int
  title              String
  stages             CommunicationStage[]
  timeDelay          Int
  targetColumnId     Int? // Target column/stage where lead will move to
  communicationType  CommunicationType
  isSendWeekDays     Boolean                @default(false)
  isSendOfficeHours  Boolean                @default(false)
  templateType       TemplateType
  subject            String?
  emailBody          String?                @db.Text
  smsBody            String?                @db.Text
  isPaused           Boolean                @default(false)
  createdBy          String?
  attachments        AutomationAttachment[] @relation("CommunicationAttachments")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  targetColumn       Column?                @relation(fields: [targetColumnId], references: [id], name: "targetColumn")
  timeDelayExecution TimeDelayExecution[]
}

model CommunicationStage {
  id                  Int                         @id @default(autoincrement())
  communicationRuleId Int
  columnId            Int
  communicationRule   CommunicationAutomationRule @relation(fields: [communicationRuleId], references: [id], onDelete: Cascade)
  column              Column                      @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([communicationRuleId, columnId])
  @@index([communicationRuleId])
}

model MarketingAutomationRule {
  id                   Int                    @id @default(autoincrement())
  companyId            Int
  target               Json
  targetCondition      TargetCondition
  date                 DateTime
  startTime            DateTime
  isAppointmentCreated Boolean                @default(false)
  vehicleMinYear       String?
  vehicleMaxYear       String?
  vehicleBrand         String?
  vehicleModel         String?
  communicationType    CommunicationType
  emailSubject         String?
  emailBody            String?                @db.Text
  smsBody              String?                @db.Text
  isPaused             Boolean                @default(false)
  createdBy            String
  isActive             Boolean                @default(true)
  attachments          AutomationAttachment[] @relation("MarketingAttachments")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model ServiceMaintenanceAutomationRule {
  id                      Int                       @id @default(autoincrement())
  companyId               Int
  title                   String
  conditionColumnId       Int
  isPaused                Boolean                   @default(false)
  timeDelay               Int? // in seconds
  targetColumnId          Int?
  templateType            TemplateType              @default(SMS)
  emailSubject            String?
  emailBody               String?                   @db.Text
  smsBody                 String?                   @db.Text
  createdBy               String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  company                 Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  targetColumn            Column?                   @relation(fields: [targetColumnId], references: [id], name: "targetColumn")
  attachments             AutomationAttachment[]    @relation("ServiceMaintenanceAttachments")
  conditionColumn         Column?                   @relation(fields: [conditionColumnId], references: [id], name: "conditionColumn")
  serviceMaintenanceStage ServiceMaintenanceStage[]
  timeDelayExecution      TimeDelayExecution[]
}

model ServiceMaintenanceStage {
  id                       Int                              @id @default(autoincrement())
  serviceMaintenanceRuleId Int
  serviceId                Int
  serviceMaintenanceRule   ServiceMaintenanceAutomationRule @relation(fields: [serviceMaintenanceRuleId], references: [id], onDelete: Cascade)
  service                  Service                          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  columnId                 Int?

  @@unique([serviceMaintenanceRuleId, serviceId])
  @@index([serviceMaintenanceRuleId])
}

model InvoiceAutomationRule {
  id                 Int                    @id @default(autoincrement())
  title              String
  companyId          Int
  type               InvoiceType            @default(Invoice)
  invoiceStatusId    Int
  timeDelay          String?
  isPaused           Boolean                @default(false)
  communicationType  CommunicationType
  emailBody          String?                @db.Text
  smsBody            String?                @db.Text
  emailSubject       String?
  invoiceStatus      Column?                @relation(fields: [invoiceStatusId], references: [id], name: "invoiceStatus")
  attachments        AutomationAttachment[] @relation("InvoiceAttachments")
  company            Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  timeDelayExecution TimeDelayExecution[]
  createdBy          String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  Column             Column?                @relation(fields: [columnId], references: [id])
  columnId           Int?
}

model AutomationAttachment {
  id                   Int                               @id @default(autoincrement())
  fileUrl              String
  communicationId      Int?
  marketingId          Int?
  serviceMaintenanceId Int?
  invoiceId            Int?
  communication        CommunicationAutomationRule?      @relation("CommunicationAttachments", fields: [communicationId], references: [id])
  marketing            MarketingAutomationRule?          @relation("MarketingAttachments", fields: [marketingId], references: [id])
  serviceMaintenance   ServiceMaintenanceAutomationRule? @relation("ServiceMaintenanceAttachments", fields: [serviceMaintenanceId], references: [id])
  invoice              InvoiceAutomationRule?            @relation("InvoiceAttachments", fields: [invoiceId], references: [id])
  createdAt            DateTime                          @default(now())
  updatedAt            DateTime                          @updatedAt
}

model InventoryAutomationRule {
  id                 Int                             @id @default(autoincrement())
  title              String
  companyId          Int
  frequency          InventoryAutomationFrequency
  day                DayOfWeek? // Only required when frequency is WEEKLY
  condition          InventoryCondition
  action             InventoryNotificationAction
  isPaused           Boolean                         @default(false)
  createdBy          String?
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime                        @updatedAt
  company            Company                         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  teamMembers        InventoryAutomationTeamMember[]
  timeDelayExecution TimeDelayExecution[]

  @@index([companyId])
}

model InventoryAutomationTeamMember {
  inventoryRuleId Int
  userId          Int
  inventoryRule   InventoryAutomationRule @relation(fields: [inventoryRuleId], references: [id], onDelete: Cascade)
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([inventoryRuleId, userId])
}

// Enums
enum CommunicationType {
  SMS
  EMAIL
  BOTH
}

enum TemplateType {
  SMS
  EMAIL
}

enum MarketingTarget {
  ALL_CLIENTS
  WITH_ESTIMATE
  WITH_INVOICE
  WITHOUT_AN_ESTIMATE
  INVOICE
}

enum TargetCondition {
  ALL_CLIENTS_THIS_MONTH
  ALL_CLIENTS_THIS_YEAR
  ALL_CLIENTS_FROM_1_MONTH
  ALL_CLIENTS_FROM_2_MONTHS
  ALL_CLIENTS_FROM_3_MONTHS
  ALL_CLIENTS_FROM_6_MONTHS
  ALL_CLIENTS_FROM_LAST_YEAR
}

enum ConditionType {
  APPOINTMENT_SCHEDULED
  ESTIMATE_CREATED
  TASK_CREATED
  MESSAGE_SENT_CLIENT
  MESSAGE_RECEIVED_CLIENT
  TIME_DELAY
}

enum ExecutionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum InventoryAutomationFrequency {
  DAILY
  WEEKLY
  MONTHLY
  EVERY_TWO_MONTHS
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum InventoryCondition {
  LOW_STOCK
  OUT_OF_STOCK
  BOTH
}

enum InventoryNotificationAction {
  EMAIL
  SMS
  BOTH
}
